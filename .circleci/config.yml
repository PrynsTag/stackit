---
version: 2.1

orbs:
  python: circleci/python@1.4

workflows:
  sample:
    jobs:
      - build-and-test:
          context:
            - docker
            - env
      - deploy-to-firebase:
          context:
            - docker
            - firebase
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - deploy-to-gcp:
          context:
            - docker

jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.9
        auth:
          username: prynstag
          password: $DOCKERHUB_PASSWORD
    parallelism: 4
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Django Migration
          command: |
            python manage.py makemigrations
            python manage.py migrate
      - run:
          name: Run Coverage Test
          command: |
            coverage run ./manage.py test -v 2 --parallel
            coverage run ./manage.py check --deploy
            mkdir -p test-results
            coverage report
            coverage html -d test-results/coverage.html
            coverage xml -o test-results/unittest/unittest.xml
            coveralls
      - store_test_results:
          path: test-results/unittest
          destination: test
      - store_artifacts:
          path: test-results
          destination: tr1

  deploy-to-firebase:
    docker:
      - image: andreysenov/firebase-tools
        auth:
          username: prynstag
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Firebase Deployment
          command: |
            firebase deploy --only hosting --token $FIREBASE_TOKEN

  deploy-to-gcp:
    docker:
      - image: google/cloud-sdk
        auth:
          username: prynstag
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Copy across app.yaml config
          command: ./app.yaml.sh > ./app.yaml
      - run:
          name: Set up gcloud config
          command: |
            echo $GOOGLE_APPLICATION_CREDENTIALS | base64 --decode --ignore-garbage > key.json
            gcloud auth activate-service-account --key-file=key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${$GOOGLE_COMPUTE_ZONE}
      - run:
          name: Deploying to App Engine
          command: gcloud app deploy
